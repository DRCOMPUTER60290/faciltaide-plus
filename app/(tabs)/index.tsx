import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ActivityIndicator,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  Share,
  Modal,
} from 'react-native';
import DateTimePicker, {
  DateTimePickerAndroid,
  DateTimePickerEvent,
} from '@react-native-community/datetimepicker';
import { router } from 'expo-router';
import { useFocusEffect } from '@react-navigation/native';
import { Bot, History as HistoryIcon, Sparkles } from 'lucide-react-native';
import Constants from 'expo-constants';

import { buildSimulationPayload, extractRawJson } from '@/lib/simulation';
import type { ApiSimulationResponse } from '@/lib/simulation';
import {
  HttpError,
  JsonParseError,
  isAbortError,
  isNetworkError,
  postJson,
} from '@/lib/http';
import {
  loadSimulationHistory,
  saveSimulationToHistory,
  MAX_HISTORY_ENTRIES,
} from '@/lib/history';
import type { SimulationHistoryEntry } from '@/types/simulation';

type ChatMessage = {
  id: string;
  role: 'bot' | 'user';
  text: string;
};

type ChatStep = {
  id: string;
  prompt: string;
  section: string;
  label?: string;
  type?: 'info' | 'question';
};

const calculateAge = (birthDate: Date, referenceDate: Date = new Date()): number => {
  let age = referenceDate.getFullYear() - birthDate.getFullYear();
  const monthDifference = referenceDate.getMonth() - birthDate.getMonth();

  if (monthDifference < 0 || (monthDifference === 0 && referenceDate.getDate() < birthDate.getDate())) {
    age -= 1;
  }

  return age < 0 ? 0 : age;
};

const CHAT_PLAN_STEPS: ChatStep[] = [
  {
    id: 'section1-intro',
    type: 'info',
    section: 'Section 1 â€“ Composition du foyer',
    prompt: 'ðŸ”· SECTION 1 â€“ COMPOSITION DU FOYER',
  },
  {
    id: 'primary-first-name',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'PrÃ©nom',
    prompt: '1. Quel est votre prÃ©nom ?',
  },
  {
    id: 'primary-birth-date',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Date de naissance',
    prompt: '2. Quelle est votre date de naissance ? (JJ/MM/AAAA)',
  },
  {
    id: 'primary-sex',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Sexe',
    prompt: '3. Quel est votre sexe ? (Masculin / FÃ©minin)',
  },
  {
    id: 'living-arrangement',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Vous vivez',
    prompt: '4. Vivez-vous : Seul(e) ou En couple ? Indiquez Â« Seul(e) Â» ou Â« En couple Â».',
  },
  {
    id: 'spouse-first-name',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'PrÃ©nom du conjoint',
    prompt:
      '5. Si vous vivez en couple, quel est le prÃ©nom de votre conjoint(e) ? RÃ©pondez Â« Non applicable Â» si vous vivez seul(e).',
  },
  {
    id: 'spouse-birth-date',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Date de naissance du conjoint',
    prompt:
      '6. Si vous vivez en couple, quelle est sa date de naissance ? (JJ/MM/AAAA) RÃ©pondez Â« Non applicable Â» si vous vivez seul(e).',
  },
  {
    id: 'spouse-sex',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Sexe du conjoint',
    prompt:
      '7. Si vous vivez en couple, quel est son sexe ? RÃ©pondez Â« Non applicable Â» si vous vivez seul(e).',
  },
  {
    id: 'conjugal-status',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Statut conjugal',
    prompt:
      '8. Quel est votre statut conjugal ? (MariÃ©(e), PacsÃ©(e), Union libre, etc.) Indiquez Â« Non applicable Â» si vous vivez seul(e).',
  },
  {
    id: 'dependents-any',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Enfants ou personnes Ã  charge',
    prompt:
      '9. Avez-vous des enfants ou des personnes Ã  charge vivant avec vous ? (Oui / Non)',
  },
  {
    id: 'dependents-names',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'PrÃ©noms des enfants / personnes Ã  charge',
    prompt:
      '10. Pour chaque enfant ou personne Ã  charge, indiquez le prÃ©nom. RÃ©pondez Â« Aucun Â» si personne ne vit avec vous.',
  },
  {
    id: 'dependents-birth-dates',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Dates de naissance des enfants / personnes Ã  charge',
    prompt:
      '11. Pour chacun, prÃ©cisez la date de naissance (JJ/MM/AAAA). RÃ©pondez Â« Non applicable Â» si aucun.',
  },
  {
    id: 'dependents-sexes',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Sexe des enfants / personnes Ã  charge',
    prompt:
      '12. Pour chaque enfant ou personne Ã  charge, indiquez le sexe.',
  },
  {
    id: 'dependents-schooling',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'ScolaritÃ© des enfants / personnes Ã  charge',
    prompt:
      '13. Pour chaque enfant ou personne Ã  charge, prÃ©cisez la situation scolaire (Non scolarisÃ©, Maternelle, Ã‰lÃ©mentaire, CollÃ¨ge, LycÃ©e, Ã‰tudes supÃ©rieures, Apprentissage, Enseignement spÃ©cialisÃ©, Autre). Indiquez Â« Non applicable Â» si aucun.',
  },
  {
    id: 'dependents-shared-custody',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Garde alternÃ©e',
    prompt:
      '14. La garde est-elle alternÃ©e (Oui/Non) pour chacun des enfants ou personnes Ã  charge ?',
  },
  {
    id: 'dependents-additional-info',
    section: 'Section 1 â€“ Composition du foyer',
    label: 'Informations complÃ©mentaires',
    prompt:
      '15. Souhaitez-vous ajouter dâ€™autres informations utiles concernant les enfants ou personnes Ã  charge ?',
  },
  {
    id: 'section2-intro',
    type: 'info',
    section: 'Section 2 â€“ Situation professionnelle et personnelle',
    prompt: 'ðŸ”¶ SECTION 2 â€“ SITUATION PROFESSIONNELLE ET PERSONNELLE',
  },
  {
    id: 'adult1-situation',
    section: 'Section 2 â€“ Situation professionnelle et personnelle',
    label: 'Situation actuelle (adulte 1)',
    prompt:
      '16. Pour vous (adulte 1), quelle est votre situation actuelle ? (SalariÃ©(e), Travailleur indÃ©pendant / auto-entrepreneur, Demandeur dâ€™emploi indemnisÃ©, Demandeur dâ€™emploi non indemnisÃ©, Ã‰tudiant(e), En situation de handicap, Sans activitÃ© / au foyer, RetraitÃ©(e)).',
  },
  {
    id: 'adult1-details',
    section: 'Section 2 â€“ Situation professionnelle et personnelle',
    label: 'DÃ©tails situation adulte 1',
    prompt:
      '17-33. PrÃ©cisez toutes les informations liÃ©es Ã  cette situation (type de contrat, temps de travail, dates, allocations chÃ´mage et montants, statut dâ€™indÃ©pendant, reconnaissance handicap, aides sociales, date de retraite, etc.). Indiquez Â« Non applicable Â» si aucune prÃ©cision.',
  },
  {
    id: 'adult2-intent',
    section: 'Section 2 â€“ Situation professionnelle et personnelle',
    label: 'Souhaitez-vous renseigner le conjoint',
    prompt:
      '34. Souhaitez-vous renseigner la situation de votre conjoint(e) ? (Oui / Non / Non applicable).',
  },
  {
    id: 'adult2-situation',
    section: 'Section 2 â€“ Situation professionnelle et personnelle',
    label: 'Situation actuelle (adulte 2)',
    prompt:
      '35. Si oui, quelle est sa situation actuelle ? (MÃªme liste que pour vous). RÃ©pondez Â« Non applicable Â» si vous nâ€™Ãªtes pas en couple ou ne souhaitez pas renseigner.',
  },
  {
    id: 'adult2-details',
    section: 'Section 2 â€“ Situation professionnelle et personnelle',
    label: 'DÃ©tails situation adulte 2',
    prompt:
      '36. PrÃ©cisez les informations complÃ©mentaires pour votre conjoint(e) (type de contrat, dates, allocations, aides, etc.) ou indiquez Â« Non applicable Â».',
  },
  {
    id: 'pregnancy-info',
    section: 'Section 2 â€“ Situation professionnelle et personnelle',
    label: 'Grossesse',
    prompt:
      '35-36. Pour chaque femme du foyer Ã¢gÃ©e de 15 Ã  50 ans (vous et/ou votre conjoint[e]), indiquez si une grossesse est en cours et depuis combien de mois (moins de 3 mois, 3-6 mois, plus de 6 mois). RÃ©pondez Â« Non Â» ou Â« Non applicable Â» si aucune grossesse.',
  },
  {
    id: 'section3-intro',
    type: 'info',
    section: 'Section 3 â€“ Logement',
    prompt: 'ðŸ”· SECTION 3 â€“ LOGEMENT',
  },
  {
    id: 'housing-postal-code',
    section: 'Section 3 â€“ Logement',
    label: 'Code postal',
    prompt: '1. Quel est votre code postal de rÃ©sidence principale ?',
  },
  {
    id: 'housing-city',
    section: 'Section 3 â€“ Logement',
    label: 'Commune',
    prompt: '2. Quelle est la commune correspondante ? (si possible, prÃ©cisez parmi les communes associÃ©es)',
  },
  {
    id: 'housing-status',
    section: 'Section 3 â€“ Logement',
    label: 'Statut dâ€™occupation',
    prompt:
      '3. Quel est votre statut dâ€™occupation ? (Locataire vide, Locataire meublÃ©, Colocation, Logement social, PropriÃ©taire, HÃ©bergÃ© gratuitement, Logement Ã©tudiant, HÃ©bergement dâ€™urgence / sans domicile).',
  },
  {
    id: 'housing-details',
    section: 'Section 3 â€“ Logement',
    label: 'DÃ©tails logement et montants',
    prompt:
      '4-22. PrÃ©cisez les informations liÃ©es Ã  votre statut : loyer hors charges, charges, bail, logement conventionnÃ©, colocation, montant des aides logement dÃ©jÃ  perÃ§ues, mensualitÃ©s de prÃªt, type dâ€™hÃ©bergement gratuit et contributions, type de logement Ã©tudiant, type dâ€™hÃ©bergement dâ€™urgence, etc. Indiquez Â« Non applicable Â» pour les Ã©lÃ©ments qui ne vous concernent pas.',
  },
  {
    id: 'housing-people',
    section: 'Section 3 â€“ Logement',
    label: 'Personnes dans le logement',
    prompt: '23. Combien de personnes vivent dans ce logement (adultes + enfants, vous compris) ?',
  },
  {
    id: 'housing-charges',
    section: 'Section 3 â€“ Logement',
    label: 'RÃ©partition des charges',
    prompt: '24. ÃŠtes-vous uniquement responsable des charges ou les partagez-vous ?',
  },
  {
    id: 'housing-continue',
    section: 'Section 3 â€“ Logement',
    label: 'Continuer vers les revenus',
    prompt: 'Souhaitez-vous continuer vers les ressources et revenus ? (Oui / Non)',
  },
  {
    id: 'section4-intro',
    type: 'info',
    section: 'Section 4 â€“ Ressources et revenus',
    prompt: 'ðŸ”· SECTION 4 â€“ RESSOURCES ET REVENUS',
  },
  {
    id: 'salary-info',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Salaires adulte 1',
    prompt:
      '1-3. Au cours des 12 derniers mois, avez-vous perÃ§u un salaire ? Si oui, indiquez le montant net mensuel moyen (3 derniers mois) et prÃ©cisez primes/heures supplÃ©mentaires/indemnitÃ©s. Indiquez Â« Non Â» si aucun salaire.',
  },
  {
    id: 'independent-info',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Revenus indÃ©pendants adulte 1',
    prompt:
      '4-6. Avez-vous des revenus dâ€™activitÃ© indÃ©pendante ? Si oui, indiquez le chiffre dâ€™affaires mensuel moyen et le revenu net estimÃ© (aprÃ¨s charges).',
  },
  {
    id: 'unemployment-info',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Allocation chÃ´mage adulte 1',
    prompt: '7-8. Percevez-vous une allocation chÃ´mage (ARE) ? Si oui, indiquez le montant mensuel net.',
  },
  {
    id: 'social-benefits-info',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Prestations sociales adulte 1',
    prompt:
      '9-14. DÃ©taillez les prestations sociales perÃ§ues (prime dâ€™activitÃ©, RSA, aides logement, allocations familiales, AAH, pension dâ€™invaliditÃ©) avec les montants mensuels, ou indiquez Â« Aucune Â».',
  },
  {
    id: 'pensions-info',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Pensions et rentes adulte 1',
    prompt:
      '15-17. Percevez-vous une pension alimentaire, une pension de retraite ou une rente/indemnitÃ© dâ€™assurance ? PrÃ©cisez les montants mensuels ou indiquez Â« Non Â».',
  },
  {
    id: 'other-resources-info',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Autres ressources adulte 1',
    prompt:
      '18-22. Avez-vous des revenus de capitaux mobiliers, des revenus locatifs, des revenus exceptionnels, une aide financiÃ¨re rÃ©guliÃ¨re dâ€™un proche ou des activitÃ©s non dÃ©clarÃ©es gÃ©nÃ©rant un revenu ? PrÃ©cisez les montants ou indiquez Â« Non Â».',
  },
  {
    id: 'partner-resources-info',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Revenus du conjoint',
    prompt:
      'RÃ©pÃ©tez les informations prÃ©cÃ©dentes pour votre conjoint(e) si vous Ãªtes en couple (salaires, indÃ©pendants, chÃ´mage, prestations, pensions, autres ressources). Indiquez Â« Non applicable Â» si vous vivez seul(e).',
  },
  {
    id: 'children-income-info',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Revenus des enfants',
    prompt:
      '23-25. Lâ€™un de vos enfants Ã¢gÃ© de 16 ans ou plus perÃ§oit-il un revenu ? Si oui, dÃ©taillez pour chaque enfant (type de revenu : job Ã©tudiant, apprentissage, stage rÃ©munÃ©rÃ©, autre + montant mensuel net) ou indiquez Â« Non Â».',
  },
  {
    id: 'resources-continue',
    section: 'Section 4 â€“ Ressources et revenus',
    label: 'Continuer vers le patrimoine',
    prompt: 'Souhaitez-vous continuer vers la section patrimoine ? (Oui / Non)',
  },
  {
    id: 'section5-intro',
    type: 'info',
    section: 'Section 5 â€“ Patrimoine',
    prompt: 'ðŸ”· SECTION 5 â€“ PATRIMOINE',
  },
  {
    id: 'savings-info',
    section: 'Section 5 â€“ Patrimoine',
    label: 'Ã‰pargne et placements',
    prompt:
      '1-3. Disposez-vous dâ€™une Ã©pargne ou de placements financiers ? Indiquez le montant total estimÃ© et la part bloquÃ©e/imposable le cas Ã©chÃ©ant.',
  },
  {
    id: 'realestate-info',
    section: 'Section 5 â€“ Patrimoine',
    label: 'Patrimoine immobilier',
    prompt:
      '4-7. ÃŠtes-vous propriÃ©taire dâ€™un ou plusieurs biens immobiliers ? PrÃ©cisez le type de bien (rÃ©sidence principale, secondaire, locatif, terrain/other), sâ€™il est louÃ© (montant du loyer perÃ§u) et lâ€™existence dâ€™un prÃªt immobilier en cours.',
  },
  {
    id: 'capital-info',
    section: 'Section 5 â€“ Patrimoine',
    label: 'Capitaux rÃ©cents',
    prompt:
      '8. Disposez-vous dâ€™un capital reÃ§u rÃ©cemment (hÃ©ritage, indemnitÃ©, donation importante) ? Indiquez le montant et la date approximative ou Â« Non Â».',
  },
  {
    id: 'valuable-assets-info',
    section: 'Section 5 â€“ Patrimoine',
    label: 'Biens de valeur',
    prompt:
      '9. PossÃ©dez-vous des biens de valeur importants (Å“uvre dâ€™art, vÃ©hicule de collection, cryptomonnaies significatives, etc.) ? PrÃ©cisez leur nature et estimation ou indiquez Â« Non Â».',
  },
  {
    id: 'patrimony-sharing-info',
    section: 'Section 5 â€“ Patrimoine',
    label: 'RÃ©partition du patrimoine',
    prompt:
      'PrÃ©cisez si le patrimoine est commun avec votre conjoint ou sâ€™il existe des biens propres au conjoint. DÃ©taillez le patrimoine propre le cas Ã©chÃ©ant.',
  },
  {
    id: 'final-choice',
    section: 'Section finale â€“ RÃ©capitulatif et confirmation',
    label: 'Dernier choix',
    prompt:
      'Souhaitez-vous vÃ©rifier vos rÃ©ponses avant de lancer la simulation ou lancer directement le calcul ? (VÃ©rifier mes rÃ©ponses / Lancer directement la simulation)',
  },
];

const formatHistoryDate = (isoString: string): string => {
  const date = new Date(isoString);
  if (Number.isNaN(date.getTime())) {
    return 'Date inconnue';
  }

  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');

  return `${day}/${month}/${year} Ã  ${hours}h${minutes}`;
};

export default function ChatScreen() {
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showGuidedAssistant, setShowGuidedAssistant] = useState(false);

  const [guidedAnswers, setGuidedAnswers] = useState<Record<string, string>>({});

  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [currentChatStep, setCurrentChatStep] = useState(0);
  const [chatInput, setChatInput] = useState('');
  const [chatError, setChatError] = useState<string | null>(null);
  const [isChatFinished, setIsChatFinished] = useState(false);
  const [isDatePickerVisible, setIsDatePickerVisible] = useState(false);
  const [pendingBirthDate, setPendingBirthDate] = useState<Date | null>(null);

  const chatScrollRef = useRef<ScrollView | null>(null);

  const chatSteps = useMemo(() => CHAT_PLAN_STEPS, []);
  const activeChatStep = chatSteps[currentChatStep] ?? null;

  const minimumBirthDate = useMemo(() => new Date(1900, 0, 1), []);
  const maximumBirthDate = useMemo(() => new Date(), []);
  const defaultBirthDate = useMemo(() => {
    const today = new Date();
    return new Date(today.getFullYear() - 30, today.getMonth(), today.getDate());
  }, []);

  const isBirthDateQuestion = useMemo(() => {
    if (!activeChatStep || activeChatStep.type === 'info') {
      return false;
    }

    const normalizedText = `${activeChatStep.label ?? ''} ${activeChatStep.prompt}`.toLowerCase();
    return activeChatStep.id.includes('birth-date') || normalizedText.includes('date de naissance');
  }, [activeChatStep]);

  const parseBirthDateInput = useCallback((value: string): Date | null => {
    const trimmed = value.trim();
    const match = trimmed.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
    if (!match) {
      return null;
    }

    const day = Number.parseInt(match[1], 10);
    const month = Number.parseInt(match[2], 10) - 1;
    const year = Number.parseInt(match[3], 10);

    const candidate = new Date(year, month, day);
    if (
      candidate.getFullYear() !== year ||
      candidate.getMonth() !== month ||
      candidate.getDate() !== day
    ) {
      return null;
    }

    return candidate;
  }, []);

  const formatBirthDate = useCallback((date: Date): string => {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  }, []);

  const handleBirthDateSelected = useCallback(
    (date: Date) => {
      const clampedTime = Math.min(
        Math.max(date.getTime(), minimumBirthDate.getTime()),
        maximumBirthDate.getTime(),
      );
      const clampedDate = new Date(clampedTime);
      setChatInput(formatBirthDate(clampedDate));
      setChatError(null);
    },
    [formatBirthDate, maximumBirthDate, minimumBirthDate],
  );

  const handleDatePickerChange = useCallback(
    (_event: DateTimePickerEvent, selectedDate?: Date) => {
      if (Platform.OS === 'ios') {
        if (selectedDate) {
          setPendingBirthDate(selectedDate);
        }
      }
    },
    [],
  );

  const handleDatePickerCancel = useCallback(() => {
    setIsDatePickerVisible(false);
  }, []);

  const handleDatePickerConfirm = useCallback(() => {
    if (pendingBirthDate) {
      handleBirthDateSelected(pendingBirthDate);
    }
    setIsDatePickerVisible(false);
  }, [handleBirthDateSelected, pendingBirthDate]);

  const handleOpenBirthDatePicker = useCallback(() => {
    if (!isBirthDateQuestion) {
      return;
    }

    const initialDate = parseBirthDateInput(chatInput) ?? pendingBirthDate ?? defaultBirthDate;

    if (Platform.OS === 'android') {
      DateTimePickerAndroid.open({
        value: initialDate,
        mode: 'date',
        display: 'calendar',
        maximumDate: maximumBirthDate,
        minimumDate: minimumBirthDate,
        onChange: (event: DateTimePickerEvent, selectedDate?: Date) => {
          if (event.type === 'set' && selectedDate) {
            handleBirthDateSelected(selectedDate);
          }
        },
      });
      return;
    }

    if (Platform.OS === 'ios') {
      setPendingBirthDate(initialDate);
      setIsDatePickerVisible(true);
    }
  }, [
    chatInput,
    defaultBirthDate,
    handleBirthDateSelected,
    isBirthDateQuestion,
    maximumBirthDate,
    minimumBirthDate,
    parseBirthDateInput,
    pendingBirthDate,
  ]);

  useEffect(() => {
    if (!isBirthDateQuestion) {
      setIsDatePickerVisible(false);
      setPendingBirthDate(null);
    }
  }, [isBirthDateQuestion]);

  const appendNextPrompts = useCallback(
    (baseMessages: ChatMessage[], startIndex: number) => {
      const messages = [...baseMessages];
      let index = startIndex;

      while (index < chatSteps.length) {
        const step = chatSteps[index];
        messages.push({
          id: `bot-${step.id}-${index}-${messages.length}`,
          role: 'bot',
          text: step.prompt,
        });

        if (step.type !== 'info') {
          return { messages, nextIndex: index, finished: false } as const;
        }

        index += 1;
      }

      return { messages, nextIndex: chatSteps.length, finished: true } as const;
    },
    [chatSteps],
  );

  const resetChatAnswers = useCallback(() => {
    setGuidedAnswers({});
  }, []);

  const startChat = useCallback(() => {
    resetChatAnswers();
    if (chatSteps.length === 0) {
      return;
    }

    const introMessages: ChatMessage[] = [
      {
        id: 'bot-intro',
        role: 'bot',
        text:
          'Bonjour ! Je vais vous poser une sÃ©rie de questions structurÃ©es pour constituer la trame complÃ¨te de votre simulation.',
      },
    ];

    const { messages, nextIndex, finished } = appendNextPrompts(introMessages, 0);

    setChatMessages(messages);
    setCurrentChatStep(nextIndex);
    setChatInput('');
    setChatError(null);
    setIsChatFinished(finished);
  }, [appendNextPrompts, chatSteps.length, resetChatAnswers]);

  useEffect(() => {
    if (showGuidedAssistant && chatMessages.length === 0) {
      startChat();
    }
  }, [showGuidedAssistant, chatMessages.length, startChat]);

  useEffect(() => {
    if (!chatScrollRef.current) {
      return;
    }

    chatScrollRef.current.scrollToEnd({ animated: true });
  }, [chatMessages]);

  const { generateEndpoint, simulateEndpoint } = useMemo(() => {
    const defaultBaseUrl = 'https://facilaide-plus-backend.onrender.com';
    const configBaseUrl =
      (Constants.expoConfig?.extra as { apiBaseUrl?: string } | undefined)?.apiBaseUrl ??
      process.env.EXPO_PUBLIC_API_BASE_URL ??
      defaultBaseUrl;

    const normalizedBaseUrl = configBaseUrl.replace(/\/+$/, '');

    return {
      baseUrl: normalizedBaseUrl,
      generateEndpoint: `${normalizedBaseUrl}/api/generate-json`,
      simulateEndpoint: `${normalizedBaseUrl}/api/simulate`,
    } as const;
  }, []);

  const [historyEntries, setHistoryEntries] = useState<SimulationHistoryEntry[]>([]);
  const [isHistoryLoading, setIsHistoryLoading] = useState(false);
  const [historyError, setHistoryError] = useState<string | null>(null);

  const refreshHistory = useCallback(async () => {
    setIsHistoryLoading(true);
    try {
      const entries = await loadSimulationHistory();
      setHistoryEntries(entries);
      setHistoryError(null);
    } catch (historyLoadError) {
      console.warn("Erreur lors du chargement de l'historique", historyLoadError);
      setHistoryError("Impossible de charger l'historique des simulations.");
    } finally {
      setIsHistoryLoading(false);
    }
  }, []);

  useFocusEffect(
    useCallback(() => {
      let isActive = true;

      const load = async () => {
        setIsHistoryLoading(true);
        try {
          const entries = await loadSimulationHistory();
          if (isActive) {
            setHistoryEntries(entries);
            setHistoryError(null);
          }
        } catch (historyLoadError) {
          console.warn("Erreur lors du chargement de l'historique", historyLoadError);
          if (isActive) {
            setHistoryError("Impossible de charger l'historique des simulations.");
          }
        } finally {
          if (isActive) {
            setIsHistoryLoading(false);
          }
        }
      };

      load();

      return () => {
        isActive = false;
      };
    }, []),
  );

  const guidedSummary = useMemo(() => {
    if (!Object.keys(guidedAnswers).length) {
      return '';
    }

    const sectionLines = new Map<string, string[]>();

    chatSteps.forEach((step) => {
      if (step.type === 'info') {
        return;
      }

      const answer = guidedAnswers[step.id];
      if (!answer || !answer.trim().length) {
        return;
      }

      const label = step.label ?? step.prompt;
      const lines = sectionLines.get(step.section) ?? [];
      lines.push(`${label}: ${answer.trim()}`);
      sectionLines.set(step.section, lines);
    });

    return Array.from(sectionLines.entries())
      .map(([sectionTitle, lines]) => `${sectionTitle}\n${lines.map((line) => `â€¢ ${line}`).join('\n')}`)
      .join('\n\n');
  }, [chatSteps, guidedAnswers]);

  const handleApplyGuidedSummary = useCallback(() => {
    if (!guidedSummary.trim().length) {
      return;
    }

    setMessage(guidedSummary.trim());
  }, [guidedSummary]);

  const handleChatSubmit = useCallback(() => {
    if (isChatFinished) {
      return;
    }

    const step = chatSteps[currentChatStep];
    if (!step || step.type === 'info') {
      return;
    }

    const rawAnswer = chatInput.trim();
    if (!rawAnswer.length) {
      setChatError('Veuillez saisir une rÃ©ponse.');
      return;
    }

    const isBirthDateStep =
      step.id.includes('birth-date') ||
      `${step.label ?? ''} ${step.prompt}`.toLowerCase().includes('date de naissance');

    let normalizedAnswer = rawAnswer;
    const additionalMessages: ChatMessage[] = [];

    if (isBirthDateStep) {
      const parsedBirthDate = parseBirthDateInput(rawAnswer);
      if (!parsedBirthDate) {
        setChatError('Veuillez saisir une date valide au format JJ/MM/AAAA.');
        return;
      }

      if (parsedBirthDate.getTime() < minimumBirthDate.getTime() || parsedBirthDate.getTime() > maximumBirthDate.getTime()) {
        setChatError(
          `Veuillez saisir une date comprise entre ${formatBirthDate(minimumBirthDate)} et ${formatBirthDate(maximumBirthDate)}.`,
        );
        return;
      }

      normalizedAnswer = formatBirthDate(parsedBirthDate);
      const age = calculateAge(parsedBirthDate, new Date());
      const ageLabel = age > 1 ? 'ans' : 'an';

      additionalMessages.push({
        id: `bot-age-${Date.now()}-${currentChatStep}`,
        role: 'bot',
        text: `Ã‚ge calculÃ© : ${age} ${ageLabel}.`,
      });
    }

    const userMessage: ChatMessage = {
      id: `user-${Date.now()}-${currentChatStep}`,
      role: 'user',
      text: normalizedAnswer,
    };
    const messagesAfterReply = [...chatMessages, userMessage, ...additionalMessages];

    setChatError(null);

    setGuidedAnswers((current) => ({
      ...current,
      [step.id]: normalizedAnswer,
    }));

    const { messages, nextIndex, finished } = appendNextPrompts(
      messagesAfterReply,
      currentChatStep + 1,
    );

    const finalMessages: ChatMessage[] = finished
      ? [
          ...messages,
          {
            id: `bot-finish-${Date.now()}`,
            role: 'bot',
            text:
              'Merci pour toutes ces prÃ©cisions. Consultez le rÃ©sumÃ© gÃ©nÃ©rÃ© ci-dessous puis cliquez sur Â« Utiliser ce rÃ©sumÃ© Â».',
          },
        ]
      : messages;

    setChatMessages(finalMessages);
    setCurrentChatStep(nextIndex);
    setChatInput('');
    setIsChatFinished(finished);
  }, [
    appendNextPrompts,
    chatInput,
    chatMessages,
    chatSteps,
    currentChatStep,
    formatBirthDate,
    isChatFinished,
    maximumBirthDate,
    minimumBirthDate,
    parseBirthDateInput,
  ]);

  const handleChatRestart = useCallback(() => {
    startChat();
  }, [startChat]);

  const handleShareHistory = useCallback(() => {
    if (!historyEntries.length) {
      return;
    }

    const latest = historyEntries[0];
    const benefitsPreview = latest.results.availableBenefits
      .slice(0, 3)
      .map(
        (benefit) =>
          `â€¢ ${benefit.label} (${benefit.period}) : ${benefit.amount.toLocaleString('fr-FR', {
            minimumFractionDigits: 0,
          })} â‚¬`,
      )
      .join('\n');

    const summary = [
      'DerniÃ¨re simulation FacilAide+',
      `Saisie utilisateur : ${latest.message}`,
      benefitsPreview,
    ]
      .filter(Boolean)
      .join('\n\n');

    Share.share({
      title: 'Simulation FacilAide+',
      message: summary,
    }).catch((shareError) => {
      console.warn('Partage impossible', shareError);
    });
  }, [historyEntries]);

  const handleSimulate = async () => {
    if (!message.trim()) {
      setError('Veuillez dÃ©crire votre situation');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const requestTimeoutMs = 5 * 60 * 1000;

      const generateResponse = await postJson<unknown>(
        generateEndpoint,
        { message: message.trim() },
        { timeoutMs: requestTimeoutMs }
      );

      const rawJson = extractRawJson(generateResponse);

      if (!rawJson) {
        const parseError = new Error(
          "La gÃ©nÃ©ration de la situation a Ã©chouÃ©. RÃ©essayez dans quelques instants."
        );
        (parseError as Error & { isUserFacing?: boolean }).isUserFacing = true;
        throw parseError;
      }

      const openFiscaPayload = { json: rawJson } as const;

      const simulateResponse = await postJson<ApiSimulationResponse>(
        simulateEndpoint,
        openFiscaPayload,
        { timeoutMs: requestTimeoutMs }
      );

      const simulationPayload = buildSimulationPayload(
        (simulateResponse ?? {}) as ApiSimulationResponse,
        rawJson
      );

      let serializedResults = '';
      try {
        serializedResults = JSON.stringify(simulationPayload);
      } catch (serializationError) {
        console.error('Erreur lors de la sÃ©rialisation des rÃ©sultats:', serializationError);
        const userError = new Error(
          'La simulation a rÃ©ussi mais les rÃ©sultats sont trop volumineux pour Ãªtre affichÃ©s.'
        );
        (userError as Error & { isUserFacing?: boolean }).isUserFacing = true;
        throw userError;
      }

      await saveSimulationToHistory({
        message: message.trim(),
        results: simulationPayload,
      });

      refreshHistory().catch((historyRefreshError) => {
        console.warn("Impossible de rafraÃ®chir l'historique", historyRefreshError);
      });

      router.push({
        pathname: '/(tabs)/result',
        params: { results: serializedResults },
      });
    } catch (err: unknown) {
      console.error('Error during simulation:', err);

      if (isAbortError(err)) {
        setError('La requÃªte a pris trop de temps. Veuillez rÃ©essayer.');
        return;
      }

      if (isNetworkError(err)) {
        setError(
          [
            'Impossible de contacter le serveur.',
            "VÃ©rifiez votre connexion et que l'API Render est bien dÃ©marrÃ©e en ouvrant https://facilaide-plus-backend.onrender.com dans un navigateur.",
          ].join(' ')
        );
        return;
      }

      if (err instanceof HttpError) {
        if (
          [502, 503, 504, 522, 524].includes(err.status) ||
          err.body.toLowerCase().includes('render')
        ) {
          setError(
            [
              'Le serveur met un peu de temps Ã  se rÃ©veiller.',
              'Patientez quelques secondes puis relancez la simulation.',
            ].join(' '),
          );
          return;
        }

        if (err.status === 429) {
          setError('Trop de demandes successives. RÃ©essayez dans une minute.');
          return;
        }

        const serverMessage = (() => {
          if (err.body && err.body.trim().length) {
            return err.body.trim();
          }
          if (err.statusText && err.statusText.trim().length) {
            return err.statusText.trim();
          }
          return `code ${err.status}`;
        })();

        setError(`Erreur du serveur (${err.status}) : ${serverMessage}`);
        return;
      }

      if (err instanceof JsonParseError) {
        setError(err.message);
        return;
      }

      if (err instanceof Error) {
        if ((err as Error & { isUserFacing?: boolean }).isUserFacing) {
          setError(err.message);
        } else {
          setError('Une erreur est survenue. Veuillez rÃ©essayer.');
        }
        return;
      }

      setError('Une erreur est survenue. Veuillez rÃ©essayer.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
      <ScrollView
        contentContainerStyle={styles.scrollContent}
        keyboardShouldPersistTaps="handled">
        <View style={styles.header}>
          <Bot size={48} color="#4ba3c3" />
          <Text style={styles.title}>FacilAide+</Text>
          <Text style={styles.subtitle}>
            Simulez vos aides sociales en quelques mots
          </Text>
        </View>

        <View style={styles.content}>
          <View style={styles.guidedSection}>
            <TouchableOpacity
              style={styles.guidedToggle}
              onPress={() => setShowGuidedAssistant((previous) => !previous)}>
              <View style={styles.guidedToggleHeader}>
                <Sparkles size={20} color="#4ba3c3" />
                <Text style={styles.guidedToggleTitle}>Assistant conversationnel</Text>
              </View>
              <Text style={styles.guidedToggleSubtitle}>
                RÃ©pondez au chatbot pour collecter toutes les informations nÃ©cessaires Ã  la simulation OpenFisca.
              </Text>
            </TouchableOpacity>

            {showGuidedAssistant && (
              <View style={styles.guidedContent}>
                <View style={styles.chatContainer}>
                  <ScrollView
                    ref={chatScrollRef}
                    style={styles.chatMessages}
                    contentContainerStyle={styles.chatMessagesContainer}
                    keyboardShouldPersistTaps="handled">
                    {chatMessages.map((chatMessage) => (
                      <View
                        key={chatMessage.id}
                        style={[
                          styles.chatBubble,
                          chatMessage.role === 'bot'
                            ? styles.chatBubbleBot
                            : styles.chatBubbleUser,
                        ]}>
                        <Text
                          style={[
                            styles.chatBubbleText,
                            chatMessage.role === 'bot'
                              ? styles.chatBubbleTextBot
                              : styles.chatBubbleTextUser,
                          ]}>
                          {chatMessage.text}
                        </Text>
                      </View>
                    ))}
                  </ScrollView>

                  <View style={styles.chatInputRow}>
                    <TextInput
                      style={styles.chatInput}
                      placeholder={isChatFinished ? 'Relancez le chatbot pour modifier les rÃ©ponses' : 'Votre rÃ©ponse...'}
                      value={chatInput}
                      onChangeText={setChatInput}
                      editable={!isChatFinished}
                      multiline
                      numberOfLines={2}
                    />
                    <TouchableOpacity
                      style={[
                        styles.chatSendButton,
                        (isChatFinished || !chatInput.trim().length) && styles.chatSendButtonDisabled,
                      ]}
                      onPress={handleChatSubmit}
                      disabled={isChatFinished || !chatInput.trim().length}>
                      <Text style={styles.chatSendButtonText}>Envoyer</Text>
                    </TouchableOpacity>
                  </View>

                  {isBirthDateQuestion && Platform.OS !== 'web' && (
                    <TouchableOpacity
                      style={styles.datePickerButton}
                      onPress={handleOpenBirthDatePicker}
                      activeOpacity={0.85}>
                      <Text style={styles.datePickerButtonText}>SÃ©lectionner dans le calendrier</Text>
                    </TouchableOpacity>
                  )}

                  {chatError && <Text style={styles.chatError}>{chatError}</Text>}

                  <View style={styles.chatActions}>
                    <TouchableOpacity
                      style={styles.chatActionButton}
                      onPress={handleChatRestart}>
                      <Text style={styles.chatActionButtonText}>Relancer le chatbot</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={[
                        styles.chatActionButtonPrimary,
                        !guidedSummary.trim().length && styles.chatActionButtonPrimaryDisabled,
                      ]}
                      onPress={handleApplyGuidedSummary}
                      disabled={!guidedSummary.trim().length}>
                      <Text style={styles.chatActionButtonPrimaryText}>Utiliser ce rÃ©sumÃ©</Text>
                    </TouchableOpacity>
                  </View>

                  <View style={styles.guidedPreviewBox}>
                    <Text style={styles.guidedPreviewTitle}>AperÃ§u gÃ©nÃ©rÃ©</Text>
                    <Text style={styles.guidedPreviewText}>
                      {guidedSummary.trim().length
                        ? guidedSummary
                        : 'RÃ©pondez aux questions pour gÃ©nÃ©rer automatiquement un rÃ©sumÃ© complet.'}
                    </Text>
                </View>

                {Platform.OS === 'ios' && (
                  <Modal
                    transparent
                    animationType="fade"
                    visible={isDatePickerVisible}
                    onRequestClose={handleDatePickerCancel}>
                    <View style={styles.datePickerModalBackdrop}>
                      <View style={styles.datePickerModalContent}>
                        <Text style={styles.datePickerModalTitle}>SÃ©lectionnez une date de naissance</Text>
                        <DateTimePicker
                          value={pendingBirthDate ?? parseBirthDateInput(chatInput) ?? defaultBirthDate}
                          mode="date"
                          display="spinner"
                          locale="fr-FR"
                          maximumDate={maximumBirthDate}
                          minimumDate={minimumBirthDate}
                          onChange={handleDatePickerChange}
                        />
                        <View style={styles.datePickerModalActions}>
                          <TouchableOpacity
                            style={styles.datePickerModalActionButton}
                            onPress={handleDatePickerCancel}>
                            <Text style={styles.datePickerModalActionText}>Annuler</Text>
                          </TouchableOpacity>
                          <TouchableOpacity
                            style={styles.datePickerModalPrimaryButton}
                            onPress={handleDatePickerConfirm}>
                            <Text style={styles.datePickerModalPrimaryButtonText}>Valider</Text>
                          </TouchableOpacity>
                        </View>
                      </View>
                    </View>
                  </Modal>
                )}
              </View>
            </View>
          )}
        </View>

          <Text style={styles.label}>DÃ©crivez votre situation :</Text>
          <TextInput
            style={styles.textInput}
            placeholder="Exemple : Je vis seule avec deux enfants, je gagne 1200 â‚¬ par mois et paie un loyer de 500 â‚¬."
            placeholderTextColor="#999"
            multiline
            numberOfLines={6}
            value={message}
            onChangeText={setMessage}
            textAlignVertical="top"
            editable={!isLoading}
          />

          {error && (
            <View style={styles.errorContainer}>
              <Text style={styles.errorText}>{error}</Text>
            </View>
          )}

          <TouchableOpacity
            style={[styles.button, isLoading && styles.buttonDisabled]}
            onPress={handleSimulate}
            disabled={isLoading}>
            {isLoading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <Text style={styles.buttonText}>Simuler mes aides</Text>
            )}
          </TouchableOpacity>

          <View style={styles.infoBox}>
            <Text style={styles.infoText}>
              ðŸ’¡ Mentionnez votre situation familiale, vos revenus, votre logement et vos Ã©vÃ©nements de vie pour obtenir une simulation complÃ¨te.
            </Text>
          </View>

          <View style={styles.historySection}>
            <View style={styles.historyHeader}>
              <HistoryIcon size={20} color="#4ba3c3" />
              <View style={styles.historyHeaderText}>
                <Text style={styles.historyTitle}>DerniÃ¨res simulations</Text>
                <Text style={styles.historySubtitle}>
                  Jusqu'Ã  {MAX_HISTORY_ENTRIES} scÃ©narios sont conservÃ©s sur cet appareil.
                </Text>
              </View>
            </View>

            {isHistoryLoading ? (
              <ActivityIndicator color="#4ba3c3" style={styles.historyLoader} />
            ) : historyError ? (
              <Text style={styles.historyError}>{historyError}</Text>
            ) : historyEntries.length === 0 ? (
              <Text style={styles.historyEmpty}>
                Vos simulations apparaÃ®tront ici pour Ãªtre relancÃ©es en un geste.
              </Text>
            ) : (
              <>
                {historyEntries.map((entry) => {
                  const topBenefit = entry.results.availableBenefits[0];
                  const secondBenefit = entry.results.availableBenefits[1];
                  return (
                    <View key={entry.id} style={styles.historyCard}>
                      <Text style={styles.historyDate}>{formatHistoryDate(entry.createdAt)}</Text>
                      <Text style={styles.historyMessage} numberOfLines={3}>
                        {entry.message}
                      </Text>

                      <View style={styles.historyBenefits}>
                        {topBenefit ? (
                          <Text style={styles.historyBenefit}>
                            â€¢ {topBenefit.label} ({topBenefit.period})
                          </Text>
                        ) : (
                          <Text style={styles.historyBenefit}>Aucune aide calculÃ©e.</Text>
                        )}
                        {secondBenefit && (
                          <Text style={styles.historyBenefit}>
                            â€¢ {secondBenefit.label} ({secondBenefit.period})
                          </Text>
                        )}
                      </View>

                      <View style={styles.historyActions}>
                        <TouchableOpacity
                          style={[styles.historyButton, styles.historySecondaryButton]}
                          onPress={() => setMessage(entry.message)}>
                          <Text style={styles.historyButtonTextSecondary}>PrÃ©-remplir</Text>
                        </TouchableOpacity>
                        <TouchableOpacity
                          style={[styles.historyButton, styles.historyPrimaryButton]}
                          onPress={() =>
                            router.push({
                              pathname: '/(tabs)/result',
                              params: { results: JSON.stringify(entry.results) },
                            })
                          }>
                          <Text style={styles.historyButtonTextPrimary}>Voir le dÃ©tail</Text>
                        </TouchableOpacity>
                      </View>
                    </View>
                  );
                })}

                <TouchableOpacity
                  style={[styles.historyButton, styles.historyShareButton]}
                  onPress={handleShareHistory}>
                  <Text style={styles.historyShareText}>Partager le dernier rÃ©sumÃ©</Text>
                </TouchableOpacity>
              </>
            )}
          </View>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  scrollContent: {
    flexGrow: 1,
  },
  header: {
    alignItems: 'center',
    paddingTop: 60,
    paddingBottom: 30,
    backgroundColor: '#fff',
    borderBottomLeftRadius: 30,
    borderBottomRightRadius: 30,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#4ba3c3',
    marginTop: 12,
  },
  subtitle: {
    fontSize: 14,
    color: '#666',
    marginTop: 8,
    textAlign: 'center',
    paddingHorizontal: 40,
  },
  content: {
    flex: 1,
    padding: 20,
  },
  guidedSection: {
    marginBottom: 24,
    backgroundColor: '#fff',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 1,
  },
  guidedToggle: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  guidedToggleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 6,
    gap: 8,
  },
  guidedToggleTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
  },
  guidedToggleSubtitle: {
    fontSize: 13,
    color: '#637085',
    lineHeight: 18,
  },
  guidedContent: {
    padding: 16,
  },
  chatContainer: {
    backgroundColor: '#f5f9fc',
    borderRadius: 12,
    padding: 12,
    borderWidth: 1,
    borderColor: '#d8e6f2',
  },
  chatMessages: {
    maxHeight: 320,
  },
  chatMessagesContainer: {
    paddingVertical: 8,
    gap: 8,
  },
  chatBubble: {
    maxWidth: '90%',
    borderRadius: 12,
    paddingVertical: 10,
    paddingHorizontal: 12,
  },
  chatBubbleBot: {
    alignSelf: 'flex-start',
    backgroundColor: '#e8f4fb',
  },
  chatBubbleUser: {
    alignSelf: 'flex-end',
    backgroundColor: '#4ba3c3',
  },
  chatBubbleText: {
    fontSize: 14,
    lineHeight: 20,
  },
  chatBubbleTextBot: {
    color: '#2c3e50',
  },
  chatBubbleTextUser: {
    color: '#fff',
  },
  chatInputRow: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    gap: 8,
    marginTop: 12,
  },
  chatInput: {
    flex: 1,
    minHeight: 44,
    maxHeight: 120,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#cddfed',
    backgroundColor: '#fff',
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 14,
    color: '#2c3e50',
  },
  chatSendButton: {
    backgroundColor: '#4ba3c3',
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 16,
  },
  chatSendButtonDisabled: {
    backgroundColor: '#aacfe0',
  },
  chatSendButtonText: {
    color: '#fff',
    fontWeight: '600',
  },
  datePickerButton: {
    marginTop: 8,
    alignSelf: 'flex-start',
    paddingVertical: 10,
    paddingHorizontal: 14,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#4ba3c3',
    backgroundColor: '#f0f8fc',
  },
  datePickerButtonText: {
    color: '#2c3e50',
    fontWeight: '600',
    fontSize: 13,
  },
  chatError: {
    color: '#c0392b',
    fontSize: 13,
    marginTop: 8,
  },
  chatActions: {
    flexDirection: 'row',
    gap: 8,
    marginTop: 12,
  },
  chatActionButton: {
    flex: 1,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#cddfed',
    paddingVertical: 12,
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  chatActionButtonText: {
    color: '#2c3e50',
    fontWeight: '600',
  },
  chatActionButtonPrimary: {
    flex: 1,
    borderRadius: 10,
    paddingVertical: 12,
    alignItems: 'center',
    backgroundColor: '#4ba3c3',
  },
  chatActionButtonPrimaryDisabled: {
    backgroundColor: '#aacfe0',
  },
  chatActionButtonPrimaryText: {
    color: '#fff',
    fontWeight: '600',
  },
  guidedPreviewBox: {
    backgroundColor: '#f1f7fb',
    borderRadius: 10,
    padding: 12,
    marginTop: 12,
  },
  guidedPreviewTitle: {
    fontSize: 13,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 6,
  },
  guidedPreviewText: {
    fontSize: 13,
    color: '#34495e',
    lineHeight: 18,
  },
  datePickerModalBackdrop: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.4)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 24,
  },
  datePickerModalContent: {
    width: '100%',
    borderRadius: 16,
    backgroundColor: '#fff',
    padding: 20,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 4 },
    elevation: 5,
  },
  datePickerModalTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 12,
    textAlign: 'center',
  },
  datePickerModalActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    gap: 12,
    marginTop: 16,
  },
  datePickerModalActionButton: {
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 10,
    backgroundColor: '#ecf5fa',
  },
  datePickerModalActionText: {
    color: '#2c3e50',
    fontWeight: '600',
  },
  datePickerModalPrimaryButton: {
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 10,
    backgroundColor: '#4ba3c3',
  },
  datePickerModalPrimaryButtonText: {
    color: '#fff',
    fontWeight: '600',
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
  },
  textInput: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    color: '#333',
    minHeight: 140,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  errorContainer: {
    backgroundColor: '#fee',
    borderRadius: 8,
    padding: 12,
    marginTop: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#e74c3c',
  },
  errorText: {
    color: '#c0392b',
    fontSize: 14,
  },
  button: {
    backgroundColor: '#4ba3c3',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginTop: 20,
    shadowColor: '#4ba3c3',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 4,
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  infoBox: {
    backgroundColor: '#eaf6fb',
    borderRadius: 10,
    padding: 12,
    marginTop: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#4ba3c3',
  },
  infoText: {
    color: '#2c3e50',
    fontSize: 13,
    lineHeight: 18,
  },
  historySection: {
    marginTop: 28,
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 1,
  },
  historyHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    gap: 12,
  },
  historyHeaderText: {
    flex: 1,
  },
  historyTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
  },
  historySubtitle: {
    fontSize: 12,
    color: '#637085',
    marginTop: 2,
  },
  historyLoader: {
    marginTop: 12,
  },
  historyError: {
    color: '#c0392b',
    fontSize: 14,
  },
  historyEmpty: {
    fontSize: 13,
    color: '#637085',
  },
  historyCard: {
    borderWidth: 1,
    borderColor: '#e0e9f1',
    borderRadius: 10,
    padding: 12,
    marginBottom: 12,
    backgroundColor: '#f9fbfd',
  },
  historyDate: {
    fontSize: 12,
    color: '#637085',
    marginBottom: 8,
  },
  historyMessage: {
    fontSize: 13,
    color: '#2c3e50',
    marginBottom: 10,
  },
  historyBenefits: {
    marginBottom: 12,
  },
  historyBenefit: {
    fontSize: 12,
    color: '#2c3e50',
    marginBottom: 4,
  },
  historyActions: {
    flexDirection: 'row',
    gap: 8,
  },
  historyButton: {
    flex: 1,
    borderRadius: 10,
    paddingVertical: 10,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'transparent',
  },
  historySecondaryButton: {
    borderColor: '#cddfed',
    backgroundColor: '#fff',
  },
  historyPrimaryButton: {
    borderColor: '#4ba3c3',
    backgroundColor: '#4ba3c3',
  },
  historyButtonTextSecondary: {
    color: '#2c3e50',
    fontWeight: '600',
  },
  historyButtonTextPrimary: {
    color: '#fff',
    fontWeight: '600',
  },
  historyShareButton: {
    borderColor: '#4ba3c3',
    backgroundColor: '#fff',
    marginTop: 8,
  },
  historyShareText: {
    color: '#4ba3c3',
    fontWeight: '600',
  },
});
